import*as t from"../utils/arr.prod.js";import*as e from"../utils/domUtils.prod.js";import s from"../utils/extend.prod.js";import i from"../utils/is.prod.js";export class InteractableSet{list=[];selectorMap={};scope;constructor(e){this.scope=e,e.addListeners({"interactable:unset":({interactable:e})=>{const{target:s}=e,o=i.string(s)?this.selectorMap[s]:s[this.scope.id],r=t.findIndex(o,(t=>t===e));o.splice(r,1)}})}new(t,e){e=s(e||{},{actions:this.scope.actions});const o=new this.scope.Interactable(t,e,this.scope.document,this.scope.events);return this.scope.addDocument(o._doc),this.list.push(o),i.string(t)?(this.selectorMap[t]||(this.selectorMap[t]=[]),this.selectorMap[t].push(o)):(o.target[this.scope.id]||Object.defineProperty(t,this.scope.id,{value:[],configurable:!0}),t[this.scope.id].push(o)),this.scope.fire("interactable:new",{target:t,options:e,interactable:o,win:this.scope._win}),o}getExisting(e,s){const o=s&&s.context||this.scope.document,r=i.string(e),c=r?this.selectorMap[e]:e[this.scope.id];if(c)return t.find(c,(t=>t._context===o&&(r||t.inContext(e))))}forEachMatch(t,s){for(const o of this.list){let r;if((i.string(o.target)?i.element(t)&&e.matchesSelector(t,o.target):t===o.target)&&o.inContext(t)&&(r=s(o)),void 0!==r)return r}}}
//# sourceMappingURL=InteractableSet.prod.js.map