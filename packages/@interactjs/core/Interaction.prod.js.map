{
	"version": 3,
	"names": [
		"arr",
		"_interopRequireWildcard",
		"require",
		"_extendProd",
		"_interopRequireDefault",
		"_hypotProd",
		"_miscProd",
		"pointerUtils",
		"rectUtils",
		"_InteractEvent",
		"_PointerInfo",
		"obj",
		"__esModule",
		"default",
		"_getRequireWildcardCache",
		"e",
		"WeakMap",
		"r",
		"t",
		"has",
		"get",
		"n",
		"__proto__",
		"a",
		"Object",
		"defineProperty",
		"getOwnPropertyDescriptor",
		"u",
		"prototype",
		"hasOwnProperty",
		"call",
		"i",
		"set",
		"_ProxyValues",
		"exports",
		"_ProxyMethods",
		"idCounter",
		"Interaction",
		"interactable",
		"element",
		"rect",
		"_rects",
		"edges",
		"_scopeFire",
		"prepared",
		"name",
		"axis",
		"pointerType",
		"pointers",
		"downEvent",
		"downPointer",
		"_latestPointer",
		"pointer",
		"event",
		"eventTarget",
		"prevEvent",
		"pointerIsDown",
		"pointerWasMoved",
		"_interacting",
		"_ending",
		"_stopped",
		"_proxy",
		"simulation",
		"pointerMoveTolerance",
		"doMove",
		"warnOnce",
		"signalArg",
		"this",
		"move",
		"coords",
		"start",
		"newCoords",
		"prev",
		"cur",
		"delta",
		"velocity",
		"_id",
		"constructor",
		"scopeFire",
		"that",
		"key",
		"value",
		"args",
		"interaction",
		"pointerDown",
		"pointerIndex",
		"updatePointer",
		"pointerInfo",
		"type",
		"action",
		"interacting",
		"length",
		"options",
		"enabled",
		"copyAction",
		"getRect",
		"extend",
		"left",
		"right",
		"top",
		"bottom",
		"_doPhase",
		"phase",
		"pointerMove",
		"modification",
		"endResult",
		"duplicateMove",
		"page",
		"x",
		"y",
		"client",
		"dx",
		"dy",
		"hypot",
		"getPointerIndex",
		"duplicate",
		"setCoordVelocity",
		"copyCoords",
		"setZeroCoords",
		"pointerUp",
		"curEventTarget",
		"test",
		"end",
		"removePointer",
		"documentBlur",
		"endPhaseResult",
		"stop",
		"currentAction",
		"pointerId",
		"getPointerId",
		"findIndex",
		"curPointer",
		"id",
		"getPointerInfo",
		"down",
		"PointerInfo",
		"push",
		"setCoords",
		"map",
		"p",
		"_now",
		"setCoordDeltas",
		"downTime",
		"timeStamp",
		"downTarget",
		"pointerExtend",
		"_updateLatestPointer",
		"splice",
		"destroy",
		"_createPreparedEvent",
		"preEnd",
		"InteractEvent",
		"_fireEvent",
		"iEvent",
		"_this$interactable",
		"fire",
		"addEdges",
		"deltaSource",
		"width",
		"height",
		"Date",
		"now"
	],
	"sources": [
		"Interaction.ts"
	],
	"sourcesContent": [
		"import * as arr from '@interactjs/utils/arr'\nimport extend from '@interactjs/utils/extend'\nimport hypot from '@interactjs/utils/hypot'\nimport { warnOnce, copyAction } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport type {\n  Element,\n  EdgeOptions,\n  PointerEventType,\n  PointerType,\n  FullRect,\n  CoordsSet,\n  ActionName,\n  ActionProps,\n} from '@interactjs/core/types'\n\nimport type { Interactable } from './Interactable'\nimport type { EventPhase } from './InteractEvent'\nimport { InteractEvent } from './InteractEvent'\nimport type { ActionDefaults } from './options'\nimport { PointerInfo } from './PointerInfo'\nimport type { Scope } from './scope'\n\nexport enum _ProxyValues {\n  interactable = '',\n  element = '',\n  prepared = '',\n  pointerIsDown = '',\n  pointerWasMoved = '',\n  _proxy = '',\n}\n\nexport enum _ProxyMethods {\n  start = '',\n  move = '',\n  end = '',\n  stop = '',\n  interacting = '',\n}\n\nexport type PointerArgProps<T extends {} = {}> = {\n  pointer: PointerType\n  event: PointerEventType\n  eventTarget: Node\n  pointerIndex: number\n  pointerInfo: PointerInfo\n  interaction: Interaction<never>\n} & T\n\nexport interface DoPhaseArg<T extends ActionName, P extends EventPhase> {\n  event: PointerEventType\n  phase: EventPhase\n  interaction: Interaction<T>\n  iEvent: InteractEvent<T, P>\n  preEnd?: boolean\n  type?: string\n}\n\nexport type DoAnyPhaseArg = DoPhaseArg<ActionName, EventPhase>\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:new': { interaction: Interaction<ActionName> }\n    'interactions:down': PointerArgProps<{\n      type: 'down'\n    }>\n    'interactions:move': PointerArgProps<{\n      type: 'move'\n      dx: number\n      dy: number\n      duplicate: boolean\n    }>\n    'interactions:up': PointerArgProps<{\n      type: 'up'\n      curEventTarget: EventTarget\n    }>\n    'interactions:cancel': SignalArgs['interactions:up'] & {\n      type: 'cancel'\n      curEventTarget: EventTarget\n    }\n    'interactions:update-pointer': PointerArgProps<{\n      down: boolean\n    }>\n    'interactions:remove-pointer': PointerArgProps\n    'interactions:blur': { interaction: Interaction<never>; event: Event; type: 'blur' }\n    'interactions:before-action-start': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-start': DoAnyPhaseArg\n    'interactions:after-action-start': DoAnyPhaseArg\n    'interactions:before-action-move': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-move': DoAnyPhaseArg\n    'interactions:after-action-move': DoAnyPhaseArg\n    'interactions:before-action-end': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-end': DoAnyPhaseArg\n    'interactions:after-action-end': DoAnyPhaseArg\n    'interactions:stop': { interaction: Interaction }\n  }\n}\n\nexport type InteractionProxy<T extends ActionName | null = never> = Pick<\n  Interaction<T>,\n  keyof typeof _ProxyValues | keyof typeof _ProxyMethods\n>\n\nlet idCounter = 0\n\nexport class Interaction<T extends ActionName | null = ActionName> {\n  /** current interactable being interacted with */\n  interactable: Interactable | null = null\n\n  /** the target element of the interactable */\n  element: Element | null = null\n  rect: FullRect | null = null\n  /** @internal */\n  _rects?: {\n    start: FullRect\n    corrected: FullRect\n    previous: FullRect\n    delta: FullRect\n  }\n  /** @internal */\n  edges: EdgeOptions | null = null\n\n  /** @internal */\n  _scopeFire: Scope['fire']\n\n  // action that's ready to be fired on next move event\n  prepared: ActionProps<T> = {\n    name: null,\n    axis: null,\n    edges: null,\n  }\n\n  pointerType: string\n\n  /** @internal keep track of added pointers */\n  pointers: PointerInfo[] = []\n\n  /** @internal pointerdown/mousedown/touchstart event */\n  downEvent: PointerEventType | null = null\n\n  /** @internal */ downPointer: PointerType = {} as PointerType\n\n  /** @internal */\n  _latestPointer: {\n    pointer: PointerType\n    event: PointerEventType\n    eventTarget: Node\n  } = {\n    pointer: null,\n    event: null,\n    eventTarget: null,\n  }\n\n  /** @internal */ prevEvent: InteractEvent<T, EventPhase> = null\n\n  pointerIsDown = false\n  pointerWasMoved = false\n  /** @internal */ _interacting = false\n  /** @internal */ _ending = false\n  /** @internal */ _stopped = true\n  /** @internal */ _proxy: InteractionProxy<T>\n\n  /** @internal */ simulation = null\n\n  /** @internal */ get pointerMoveTolerance() {\n    return 1\n  }\n\n  doMove = warnOnce(function (this: Interaction, signalArg: any) {\n    this.move(signalArg)\n  }, 'The interaction.doMove() method has been renamed to interaction.move()')\n\n  coords: CoordsSet = {\n    // Starting InteractEvent pointer coordinates\n    start: pointerUtils.newCoords(),\n    // Previous native pointer move event coordinates\n    prev: pointerUtils.newCoords(),\n    // current native pointer move event coordinates\n    cur: pointerUtils.newCoords(),\n    // Change in coordinates and time of the pointer\n    delta: pointerUtils.newCoords(),\n    // pointer velocity\n    velocity: pointerUtils.newCoords(),\n  }\n\n  /** @internal */ readonly _id: number = idCounter++\n\n  constructor({ pointerType, scopeFire }: { pointerType?: string; scopeFire: Scope['fire'] }) {\n    this._scopeFire = scopeFire\n    this.pointerType = pointerType\n\n    const that = this\n\n    this._proxy = {} as InteractionProxy<T>\n\n    for (const key in _ProxyValues) {\n      Object.defineProperty(this._proxy, key, {\n        get() {\n          return that[key]\n        },\n      })\n    }\n\n    for (const key in _ProxyMethods) {\n      Object.defineProperty(this._proxy, key, {\n        value: (...args: any[]) => that[key](...args),\n      })\n    }\n\n    this._scopeFire('interactions:new', { interaction: this })\n  }\n\n  pointerDown(pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    const pointerIndex = this.updatePointer(pointer, event, eventTarget, true)\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:down', {\n      pointer,\n      event,\n      eventTarget,\n      pointerIndex,\n      pointerInfo,\n      type: 'down',\n      interaction: this as unknown as Interaction<never>,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable({\n   *     // disable the default drag start by down->move\n   *     manualStart: true\n   *   })\n   *   // start dragging after the user holds the pointer down\n   *   .on('hold', function (event) {\n   *     var interaction = event.interaction\n   *\n   *     if (!interaction.interacting()) {\n   *       interaction.start({ name: 'drag' },\n   *                         event.interactable,\n   *                         event.currentTarget)\n   *     }\n   * })\n   * ```\n   *\n   * Start an action with the given Interactable and Element as tartgets. The\n   * action must be enabled for the target Interactable and an appropriate\n   * number of pointers must be held down - 1 for drag/resize, 2 for gesture.\n   *\n   * Use it with `interactable.<action>able({ manualStart: false })` to always\n   * [start actions manually](https://github.com/taye/interact.js/issues/114)\n   *\n   * @param action - The action to be performed - drag, resize, etc.\n   * @param target - The Interactable to target\n   * @param element - The DOM Element to target\n   * @returns Whether the interaction was successfully started\n   */\n  start<A extends ActionName>(action: ActionProps<A>, interactable: Interactable, element: Element): boolean {\n    if (\n      this.interacting() ||\n      !this.pointerIsDown ||\n      this.pointers.length < (action.name === 'gesture' ? 2 : 1) ||\n      !interactable.options[action.name as keyof ActionDefaults].enabled\n    ) {\n      return false\n    }\n\n    copyAction(this.prepared, action)\n\n    this.interactable = interactable\n    this.element = element\n    this.rect = interactable.getRect(element)\n    this.edges = this.prepared.edges\n      ? extend({}, this.prepared.edges)\n      : { left: true, right: true, top: true, bottom: true }\n    this._stopped = false\n    this._interacting =\n      this._doPhase({\n        interaction: this,\n        event: this.downEvent,\n        phase: 'start',\n      }) && !this._stopped\n\n    return this._interacting\n  }\n\n  pointerMove(pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    if (!this.simulation && !(this.modification && this.modification.endResult)) {\n      this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const duplicateMove =\n      this.coords.cur.page.x === this.coords.prev.page.x &&\n      this.coords.cur.page.y === this.coords.prev.page.y &&\n      this.coords.cur.client.x === this.coords.prev.client.x &&\n      this.coords.cur.client.y === this.coords.prev.client.y\n\n    let dx: number\n    let dy: number\n\n    // register movement greater than pointerMoveTolerance\n    if (this.pointerIsDown && !this.pointerWasMoved) {\n      dx = this.coords.cur.client.x - this.coords.start.client.x\n      dy = this.coords.cur.client.y - this.coords.start.client.y\n\n      this.pointerWasMoved = hypot(dx, dy) > this.pointerMoveTolerance\n    }\n\n    const pointerIndex = this.getPointerIndex(pointer)\n    const signalArg = {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      type: 'move' as const,\n      eventTarget,\n      dx,\n      dy,\n      duplicate: duplicateMove,\n      interaction: this as unknown as Interaction<never>,\n    }\n\n    if (!duplicateMove) {\n      // set pointer coordinate, time changes and velocity\n      pointerUtils.setCoordVelocity(this.coords.velocity, this.coords.delta)\n    }\n\n    this._scopeFire('interactions:move', signalArg)\n\n    if (!duplicateMove && !this.simulation) {\n      // if interacting, fire an 'action-move' signal etc\n      if (this.interacting()) {\n        signalArg.type = null\n        this.move(signalArg)\n      }\n\n      if (this.pointerWasMoved) {\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n      }\n    }\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('dragmove', function (event) {\n   *     if (someCondition) {\n   *       // change the snap settings\n   *       event.interactable.draggable({ snap: { targets: [] }})\n   *       // fire another move event with re-calculated snap\n   *       event.interaction.move()\n   *     }\n   *   })\n   * ```\n   *\n   * Force a move of the current action at the same coordinates. Useful if\n   * snap/restrict has been changed and you want a movement with the new\n   * settings.\n   */\n  move(signalArg?: any) {\n    if (!signalArg || !signalArg.event) {\n      pointerUtils.setZeroCoords(this.coords.delta)\n    }\n\n    signalArg = extend(\n      {\n        pointer: this._latestPointer.pointer,\n        event: this._latestPointer.event,\n        eventTarget: this._latestPointer.eventTarget,\n        interaction: this,\n      },\n      signalArg || {},\n    )\n\n    signalArg.phase = 'move'\n\n    this._doPhase(signalArg)\n  }\n\n  /**\n   * @internal\n   * End interact move events and stop auto-scroll unless simulation is running\n   */\n  pointerUp(pointer: PointerType, event: PointerEventType, eventTarget: Node, curEventTarget: EventTarget) {\n    let pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) {\n      pointerIndex = this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const type = /cancel$/i.test(event.type) ? 'cancel' : 'up'\n\n    this._scopeFire(`interactions:${type}` as 'interactions:up' | 'interactions:cancel', {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      eventTarget,\n      type: type as any,\n      curEventTarget,\n      interaction: this as unknown as Interaction<never>,\n    })\n\n    if (!this.simulation) {\n      this.end(event)\n    }\n\n    this.removePointer(pointer, event)\n  }\n\n  /** @internal */\n  documentBlur(event: Event) {\n    this.end(event as any)\n    this._scopeFire('interactions:blur', {\n      event,\n      type: 'blur',\n      interaction: this as unknown as Interaction<never>,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('move', function (event) {\n   *     if (event.pageX > 1000) {\n   *       // end the current action\n   *       event.interaction.end()\n   *       // stop all further listeners from being called\n   *       event.stopImmediatePropagation()\n   *     }\n   *   })\n   * ```\n   */\n  end(event?: PointerEventType) {\n    this._ending = true\n    event = event || this._latestPointer.event\n    let endPhaseResult: boolean\n\n    if (this.interacting()) {\n      endPhaseResult = this._doPhase({\n        event,\n        interaction: this,\n        phase: 'end',\n      })\n    }\n\n    this._ending = false\n\n    if (endPhaseResult === true) {\n      this.stop()\n    }\n  }\n\n  currentAction() {\n    return this._interacting ? this.prepared.name : null\n  }\n\n  interacting() {\n    return this._interacting\n  }\n\n  stop() {\n    this._scopeFire('interactions:stop', { interaction: this })\n\n    this.interactable = this.element = null\n\n    this._interacting = false\n    this._stopped = true\n    this.prepared.name = this.prevEvent = null\n  }\n\n  /** @internal */\n  getPointerIndex(pointer: any) {\n    const pointerId = pointerUtils.getPointerId(pointer)\n\n    // mouse and pen interactions may have only one pointer\n    return this.pointerType === 'mouse' || this.pointerType === 'pen'\n      ? this.pointers.length - 1\n      : arr.findIndex(this.pointers, (curPointer) => curPointer.id === pointerId)\n  }\n\n  /** @internal */\n  getPointerInfo(pointer: any) {\n    return this.pointers[this.getPointerIndex(pointer)]\n  }\n\n  /** @internal */\n  updatePointer(pointer: PointerType, event: PointerEventType, eventTarget: Node, down?: boolean) {\n    const id = pointerUtils.getPointerId(pointer)\n    let pointerIndex = this.getPointerIndex(pointer)\n    let pointerInfo = this.pointers[pointerIndex]\n\n    down = down === false ? false : down || /(down|start)$/i.test(event.type)\n\n    if (!pointerInfo) {\n      pointerInfo = new PointerInfo(id, pointer, event, null, null)\n\n      pointerIndex = this.pointers.length\n      this.pointers.push(pointerInfo)\n    } else {\n      pointerInfo.pointer = pointer\n    }\n\n    pointerUtils.setCoords(\n      this.coords.cur,\n      this.pointers.map((p) => p.pointer),\n      this._now(),\n    )\n    pointerUtils.setCoordDeltas(this.coords.delta, this.coords.prev, this.coords.cur)\n\n    if (down) {\n      this.pointerIsDown = true\n\n      pointerInfo.downTime = this.coords.cur.timeStamp\n      pointerInfo.downTarget = eventTarget\n      pointerUtils.pointerExtend(this.downPointer, pointer)\n\n      if (!this.interacting()) {\n        pointerUtils.copyCoords(this.coords.start, this.coords.cur)\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n\n        this.downEvent = event\n        this.pointerWasMoved = false\n      }\n    }\n\n    this._updateLatestPointer(pointer, event, eventTarget)\n\n    this._scopeFire('interactions:update-pointer', {\n      pointer,\n      event,\n      eventTarget,\n      down,\n      pointerInfo,\n      pointerIndex,\n      interaction: this as unknown as Interaction<never>,\n    })\n\n    return pointerIndex\n  }\n\n  /** @internal */\n  removePointer(pointer: PointerType, event: PointerEventType) {\n    const pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) return\n\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:remove-pointer', {\n      pointer,\n      event,\n      eventTarget: null,\n      pointerIndex,\n      pointerInfo,\n      interaction: this as unknown as Interaction<never>,\n    })\n\n    this.pointers.splice(pointerIndex, 1)\n    this.pointerIsDown = false\n  }\n\n  /** @internal */\n  _updateLatestPointer(pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    this._latestPointer.pointer = pointer\n    this._latestPointer.event = event\n    this._latestPointer.eventTarget = eventTarget\n  }\n\n  destroy() {\n    this._latestPointer.pointer = null\n    this._latestPointer.event = null\n    this._latestPointer.eventTarget = null\n  }\n\n  /** @internal */\n  _createPreparedEvent<P extends EventPhase>(\n    event: PointerEventType,\n    phase: P,\n    preEnd?: boolean,\n    type?: string,\n  ) {\n    return new InteractEvent<T, P>(this, event, this.prepared.name, phase, this.element, preEnd, type)\n  }\n\n  /** @internal */\n  _fireEvent<P extends EventPhase>(iEvent: InteractEvent<T, P>) {\n    this.interactable?.fire(iEvent)\n\n    if (!this.prevEvent || iEvent.timeStamp >= this.prevEvent.timeStamp) {\n      this.prevEvent = iEvent\n    }\n  }\n\n  /** @internal */\n  _doPhase<P extends EventPhase>(\n    signalArg: Omit<DoPhaseArg<T, P>, 'iEvent'> & { iEvent?: InteractEvent<T, P> },\n  ) {\n    const { event, phase, preEnd, type } = signalArg\n    const { rect } = this\n\n    if (rect && phase === 'move') {\n      // update the rect changes due to pointer move\n      rectUtils.addEdges(this.edges, rect, this.coords.delta[this.interactable.options.deltaSource])\n\n      rect.width = rect.right - rect.left\n      rect.height = rect.bottom - rect.top\n    }\n\n    const beforeResult = this._scopeFire(`interactions:before-action-${phase}` as any, signalArg)\n\n    if (beforeResult === false) {\n      return false\n    }\n\n    const iEvent = (signalArg.iEvent = this._createPreparedEvent(event, phase, preEnd, type))\n\n    this._scopeFire(`interactions:action-${phase}` as any, signalArg)\n\n    if (phase === 'start') {\n      this.prevEvent = iEvent\n    }\n\n    this._fireEvent(iEvent)\n\n    this._scopeFire(`interactions:after-action-${phase}` as any, signalArg)\n\n    return true\n  }\n\n  /** @internal */\n  _now() {\n    return Date.now()\n  }\n}\n\nexport default Interaction\nexport { PointerInfo }\n"
	],
	"mappings": "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"
}