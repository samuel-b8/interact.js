{
	"version": 3,
	"names": [],
	"sources": [
		"types.ts"
	],
	"sourcesContent": [
		"import type Interaction from '@interactjs/core/Interaction'\n\nimport type { Interactable } from './Interactable'\nimport type { PhaseMap, InteractEvent } from './InteractEvent'\nimport type { NativePointerEvent as NativePointerEvent_ } from './NativeTypes'\n\nexport type OrBoolean<T> = {\n  [P in keyof T]: T[P] | boolean\n}\n\nexport type Element = HTMLElement | SVGElement\nexport type Context = Document | Element\nexport type EventTarget = Window | Document | Element\nexport type Target = EventTarget | string\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nexport interface Size {\n  width: number\n  height: number\n}\n\nexport interface Rect {\n  top: number\n  left: number\n  bottom: number\n  right: number\n  width?: number\n  height?: number\n}\n\nexport type FullRect = Required<Rect>\n\nexport type RectFunction<T extends any[]> = (...args: T) => Rect | Element\n\nexport type RectResolvable<T extends any[]> = Rect | string | Element | RectFunction<T>\n\nexport type Dimensions = Point & Size\n\nexport interface CoordsSetMember {\n  page: Point\n  client: Point\n  timeStamp: number\n}\n\nexport interface CoordsSet {\n  cur: CoordsSetMember\n  prev: CoordsSetMember\n  start: CoordsSetMember\n  delta: CoordsSetMember\n  velocity: CoordsSetMember\n}\n\nexport interface HasGetRect {\n  getRect(element: Element): Rect\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ActionMap {}\n\nexport type ActionName = keyof ActionMap\n\nexport interface Actions {\n  map: ActionMap\n  phases: PhaseMap\n  methodDict: Record<ActionName, keyof Interactable>\n  phaselessTypes: { [type: string]: true }\n}\n\nexport interface ActionProps<T extends ActionName | null = never> {\n  name: T\n  axis?: 'x' | 'y' | 'xy' | null\n  edges?: EdgeOptions | null\n}\n\nexport interface InertiaOption {\n  resistance?: number\n  minSpeed?: number\n  endSpeed?: number\n  allowResume?: boolean\n  smoothEndDuration?: number\n}\nexport type InertiaOptions = InertiaOption | boolean\n\nexport interface EdgeOptions {\n  top?: boolean | string | Element\n  left?: boolean | string | Element\n  bottom?: boolean | string | Element\n  right?: boolean | string | Element\n}\n\nexport type CursorChecker = (\n  action: ActionProps<ActionName>,\n  interactable: Interactable,\n  element: Element,\n  interacting: boolean,\n) => string\n\nexport interface ActionMethod<T> {\n  (this: Interactable): T\n  (this: Interactable, options?: Partial<OrBoolean<T>> | boolean): typeof this\n}\n\nexport interface OptionMethod<T> {\n  (this: Interactable): T\n  // eslint-disable-next-line no-undef\n  (this: Interactable, options: T): typeof this\n}\n\nexport type ActionChecker = (\n  pointerEvent: any,\n  defaultAction: string,\n  interactable: Interactable,\n  element: Element,\n  interaction: Interaction,\n) => ActionProps\n\nexport type OriginFunction = (target: Element) => Rect\n\nexport interface PointerEventsOptions {\n  holdDuration?: number\n  allowFrom?: string\n  ignoreFrom?: string\n  origin?: Rect | Point | string | Element | OriginFunction\n}\n\nexport type RectChecker = (element: Element) => Rect\n\nexport type NativePointerEventType = typeof NativePointerEvent_\nexport type PointerEventType = MouseEvent | TouchEvent | Partial<NativePointerEventType> | InteractEvent\nexport type PointerType = MouseEvent | Touch | Partial<NativePointerEventType> | InteractEvent\n\nexport type EventTypes = string | ListenerMap | Array<string | ListenerMap>\n\nexport type Listener = (...args: any[]) => any\nexport type Listeners = ListenerMap | ListenerMap[]\nexport type ListenersArg = Listener | ListenerMap | Array<Listener | ListenerMap>\nexport interface ListenerMap {\n  [index: string]: ListenersArg | ListenersArg[]\n}\n\nexport type ArrayElementType<T> = T extends Array<infer P> ? P : never\n"
	],
	"mappings": ""
}