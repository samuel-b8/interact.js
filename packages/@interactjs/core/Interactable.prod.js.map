{
	"version": 3,
	"names": [
		"arr",
		"e",
		"r",
		"__esModule",
		"default",
		"t",
		"_getRequireWildcardCache",
		"has",
		"get",
		"n",
		"__proto__",
		"a",
		"Object",
		"defineProperty",
		"getOwnPropertyDescriptor",
		"u",
		"prototype",
		"hasOwnProperty",
		"call",
		"i",
		"set",
		"_interopRequireWildcard",
		"require",
		"_browserProd",
		"_interopRequireDefault",
		"_cloneProd",
		"_domUtilsProd",
		"_extendProd",
		"_isProd",
		"_isNonNativeEventProd",
		"_normalizeListenersProd",
		"_windowProd",
		"_Eventable",
		"obj",
		"WeakMap",
		"OnOffMethod",
		"exports",
		"Interactable",
		"_defaults",
		"base",
		"perAction",
		"actions",
		"target",
		"options",
		"_actions",
		"events",
		"Eventable",
		"_context",
		"_win",
		"_doc",
		"_scopeEvents",
		"constructor",
		"defaultContext",
		"scopeEvents",
		"this",
		"context",
		"getWindow",
		"trySelector",
		"document",
		"setOnEvents",
		"actionName",
		"phases",
		"is",
		"func",
		"onstart",
		"on",
		"onmove",
		"onend",
		"oninertiastart",
		"updatePerActionListeners",
		"prev",
		"cur",
		"_this$_actions$map$ac",
		"actionFilter",
		"map",
		"filterEventType",
		"filter",
		"type",
		"isNonNativeEvent",
		"array",
		"object",
		"_onOff",
		"Off",
		"undefined",
		"On",
		"setPerAction",
		"defaults",
		"optionName_",
		"optionName",
		"actionOptions",
		"optionValue",
		"listeners",
		"from",
		"plainObject",
		"extend",
		"clone",
		"enabled",
		"bool",
		"getRect",
		"element",
		"string",
		"querySelector",
		"getElementRect",
		"rectChecker",
		"checker",
		"rect",
		"apply",
		"width",
		"right",
		"left",
		"height",
		"bottom",
		"top",
		"_backCompatOption",
		"newValue",
		"action",
		"origin",
		"deltaSource",
		"getAllElements",
		"Array",
		"querySelectorAll",
		"inContext",
		"ownerDocument",
		"nodeContains",
		"testIgnoreAllow",
		"targetNode",
		"eventTarget",
		"testIgnore",
		"ignoreFrom",
		"testAllow",
		"allowFrom",
		"matchesUpTo",
		"fire",
		"iEvent",
		"method",
		"typeArg",
		"listenerArg",
		"normalizeListeners",
		"browser",
		"wheelEvent",
		"listener",
		"types",
		"off",
		"actionName_",
		"methodDict",
		"methodName",
		"setting",
		"unset",
		"delegatedEvents",
		"delegated",
		"length",
		"selector",
		"splice",
		"l",
		"removeDelegate",
		"remove"
	],
	"sources": [
		"Interactable.ts"
	],
	"sourcesContent": [
		"/* eslint-disable no-dupe-class-members */\nimport * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\n\nimport type { Scope } from '@interactjs/core/scope'\nimport type {\n  ActionMap,\n  ActionMethod,\n  ActionName,\n  Actions,\n  Context,\n  Element,\n  EventTypes,\n  Listeners,\n  ListenersArg,\n  OrBoolean,\n  Target,\n} from '@interactjs/core/types'\n\nimport { Eventable } from './Eventable'\nimport type { ActionDefaults, Defaults, OptionsArg, PerActionDefaults, Options } from './options'\n\ntype IgnoreValue = string | Element | boolean\ntype DeltaSource = 'page' | 'client'\n\nconst enum OnOffMethod {\n  On,\n  Off,\n}\n\n/**\n * ```ts\n * const interactable = interact('.cards')\n *   .draggable({\n *     listeners: { move: event => console.log(event.type, event.pageX, event.pageY) }\n *   })\n *   .resizable({\n *     listeners: { move: event => console.log(event.rect) },\n *     modifiers: [interact.modifiers.restrictEdges({ outer: 'parent' })]\n *   })\n * ```\n */\nexport class Interactable implements Partial<Eventable> {\n  /** @internal */ get _defaults(): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly target: Target\n  /** @internal */ readonly options!: Required<Options>\n  /** @internal */ readonly _actions: Actions\n  /** @internal */ readonly events = new Eventable()\n  /** @internal */ readonly _context: Context\n  /** @internal */ readonly _win: Window\n  /** @internal */ readonly _doc: Document\n  /** @internal */ readonly _scopeEvents: Scope['events']\n\n  constructor(\n    target: Target,\n    options: any,\n    defaultContext: Document | Element,\n    scopeEvents: Scope['events'],\n  ) {\n    this._actions = options.actions\n    this.target = target\n    this._context = options.context || defaultContext\n    this._win = getWindow(trySelector(target) ? this._context : target)\n    this._doc = this._win.document\n    this._scopeEvents = scopeEvents\n\n    this.set(options)\n  }\n\n  setOnEvents(actionName: ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) {\n      this.on(`${actionName}start`, phases.onstart)\n    }\n    if (is.func(phases.onmove)) {\n      this.on(`${actionName}move`, phases.onmove)\n    }\n    if (is.func(phases.onend)) {\n      this.on(`${actionName}end`, phases.onend)\n    }\n    if (is.func(phases.oninertiastart)) {\n      this.on(`${actionName}inertiastart`, phases.oninertiastart)\n    }\n\n    return this\n  }\n\n  updatePerActionListeners(actionName: ActionName, prev: Listeners | undefined, cur: Listeners | undefined) {\n    const actionFilter = (this._actions.map[actionName] as { filterEventType?: (type: string) => boolean })\n      ?.filterEventType\n    const filter = (type: string) =>\n      (actionFilter == null || actionFilter(type)) && isNonNativeEvent(type, this._actions)\n\n    if (is.array(prev) || is.object(prev)) {\n      this._onOff(OnOffMethod.Off, actionName, prev, undefined, filter)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this._onOff(OnOffMethod.On, actionName, cur, undefined, filter)\n    }\n  }\n\n  setPerAction(actionName: ActionName, options: OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array(optionValue)) {\n        ;(actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        ;(actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || ({} as any),\n          clone(optionValue),\n        )\n\n        // set anabled field to true if it exists in the defaults\n        if (\n          is.object(defaults.perAction[optionName]) &&\n          'enabled' in (defaults.perAction[optionName] as any)\n        ) {\n          ;(actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        ;(actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        ;(actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {Rect} The object's bounding rectangle.\n   */\n  getRect(element: Element) {\n    element = element || (is.element(this.target) ? this.target : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker(): (element: Element) => any | null\n  rectChecker(checker: (element: Element) => any): this\n  rectChecker(checker?: (element: Element) => any) {\n    if (is.func(checker)) {\n      this.getRect = (element) => {\n        const rect = extend({}, checker.apply(this, element))\n\n        if (!(('width' in rect) as unknown)) {\n          rect.width = rect.right - rect.left\n          rect.height = rect.bottom - rect.top\n        }\n\n        return rect\n      }\n\n      return this\n    }\n\n    if (checker === null) {\n      delete (this as Partial<typeof this>).getRect\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  /** @internal */\n  _backCompatOption(optionName: keyof Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      ;(this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        ;(this.options[action as keyof ActionMap] as any)[optionName] = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin(newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource(): DeltaSource\n  deltaSource(newValue: DeltaSource): this\n  deltaSource(newValue?: DeltaSource) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /** @internal */\n  getAllElements(): Element[] {\n    const { target } = this\n\n    if (is.string(target)) {\n      return Array.from(this._context.querySelectorAll(target))\n    }\n\n    if (is.func(target) && (target as any).getAllElements) {\n      return (target as any).getAllElements()\n    }\n\n    return is.element(target) ? [target] : []\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context() {\n    return this._context\n  }\n\n  inContext(element: Document | Node) {\n    return this._context === element.ownerDocument || nodeContains(this._context, element)\n  }\n\n  /** @internal */\n  testIgnoreAllow(\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue; allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Node,\n  ) {\n    return (\n      !this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n      this.testAllow(options.allowFrom, targetNode, eventTarget)\n    )\n  }\n\n  /** @internal */\n  testAllow(this: Interactable, allowFrom: IgnoreValue | undefined, targetNode: Node, element: Node) {\n    if (!allowFrom) {\n      return true\n    }\n\n    if (!is.element(element)) {\n      return false\n    }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    } else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  /** @internal */\n  testIgnore(this: Interactable, ignoreFrom: IgnoreValue | undefined, targetNode: Node, element: Node) {\n    if (!ignoreFrom || !is.element(element)) {\n      return false\n    }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    } else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire<E extends { type: string }>(iEvent: E) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  /** @internal */\n  _onOff(\n    method: OnOffMethod,\n    typeArg: EventTypes,\n    listenerArg?: ListenersArg | null,\n    options?: any,\n    filter?: (type: string) => boolean,\n  ) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const listeners = normalizeListeners(typeArg, listenerArg, filter)\n\n    for (let type in listeners) {\n      if (type === 'wheel') {\n        type = browser.wheelEvent\n      }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method === OnOffMethod.On ? 'on' : 'off'](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          this._scopeEvents[method === OnOffMethod.On ? 'addDelegate' : 'removeDelegate'](\n            this.target,\n            this._context,\n            type,\n            listener,\n            options,\n          )\n        }\n        // remove listener from this Interactable's element\n        else {\n          this._scopeEvents[method === OnOffMethod.On ? 'add' : 'remove'](\n            this.target,\n            type,\n            listener,\n            options,\n          )\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on(types: EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff(OnOffMethod.On, types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off(types: string | string[] | EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff(OnOffMethod.Off, types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set(options: OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    ;(this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n      ;(this[methodName] as ActionMethod<unknown>)(options[actionName])\n    }\n\n    for (const setting in options) {\n      if (setting === 'getRect') {\n        this.rectChecker(options.getRect)\n        continue\n      }\n\n      if (is.func((this as any)[setting])) {\n        ;(this as any)[setting](options[setting as keyof typeof options])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   */\n  unset() {\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in this._scopeEvents.delegatedEvents) {\n        const delegated = this._scopeEvents.delegatedEvents[type]\n\n        for (let i = delegated.length - 1; i >= 0; i--) {\n          const { selector, context, listeners } = delegated[i]\n\n          if (selector === this.target && context === this._context) {\n            delegated.splice(i, 1)\n          }\n\n          for (let l = listeners.length - 1; l >= 0; l--) {\n            this._scopeEvents.removeDelegate(\n              this.target,\n              this._context,\n              type,\n              listeners[l][0],\n              listeners[l][1],\n            )\n          }\n        }\n      }\n    } else {\n      this._scopeEvents.remove(this.target, 'all')\n    }\n  }\n}\n"
	],
	"mappings": "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"
}