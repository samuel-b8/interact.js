{
	"version": 3,
	"names": [
		"Modification",
		"makeModifier",
		"module",
		"name",
		"defaults",
		"methods",
		"start",
		"set",
		"beforeEnd",
		"stop",
		"modifier",
		"_options",
		"options",
		"enabled",
		"prop",
		"m",
		"enable",
		"disable",
		"_defaults",
		"_methods",
		"addEventModifiers",
		"iEvent",
		"interaction",
		"result",
		"modification",
		"modifiers",
		"eventProps",
		"modifiersBase",
		"id",
		"before",
		"install",
		"scope",
		"perAction",
		"listeners",
		"arg",
		"coords",
		"page",
		"edges",
		"applyToInteraction",
		"ret",
		"setAndApply",
		"startEdges",
		"restoreInteractionCoords"
	],
	"sources": [
		"base.ts"
	],
	"sourcesContent": [
		"import type { InteractEvent } from '@interactjs/core/InteractEvent'\nimport type Interaction from '@interactjs/core/Interaction'\nimport type { Plugin } from '@interactjs/core/scope'\n\nimport { Modification } from './Modification'\nimport type { Modifier, ModifierModule, ModifierState } from './types'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    modification?: Modification\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface InteractEvent {\n    modifiers?: Array<{\n      name: string\n      [key: string]: any\n    }>\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface PerActionDefaults {\n    modifiers?: Modifier[]\n  }\n}\n\nexport function makeModifier<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Name extends string,\n  Result,\n>(module: ModifierModule<Defaults, State, Result>, name?: Name) {\n  const { defaults } = module\n  const methods = {\n    start: module.start,\n    set: module.set,\n    beforeEnd: module.beforeEnd,\n    stop: module.stop,\n  }\n\n  const modifier = (_options?: Partial<Defaults>) => {\n    const options = (_options || {}) as Defaults\n\n    options.enabled = options.enabled !== false\n\n    // add missing defaults to options\n    for (const prop in defaults) {\n      if (!(prop in options)) {\n        ;(options as any)[prop] = defaults[prop]\n      }\n    }\n\n    const m: Modifier<Defaults, State, Name, Result> = {\n      options,\n      methods,\n      name,\n      enable: () => {\n        options.enabled = true\n        return m\n      },\n      disable: () => {\n        options.enabled = false\n        return m\n      },\n    }\n\n    return m\n  }\n\n  if (name && typeof name === 'string') {\n    // for backwrads compatibility\n    modifier._defaults = defaults\n    modifier._methods = methods\n  }\n\n  return modifier\n}\n\nexport function addEventModifiers({\n  iEvent,\n  interaction,\n}: {\n  iEvent: InteractEvent<any>\n  interaction: Interaction<any>\n}) {\n  const result = interaction.modification!.result\n\n  if (result) {\n    iEvent.modifiers = result.eventProps\n  }\n}\n\nconst modifiersBase: Plugin = {\n  id: 'modifiers/base',\n  before: ['actions'],\n  install: (scope) => {\n    scope.defaults.perAction.modifiers = []\n  },\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.modification = new Modification(interaction)\n    },\n\n    'interactions:before-action-start': (arg) => {\n      const { interaction } = arg\n      const modification = arg.interaction.modification!\n\n      modification.start(arg, interaction.coords.start.page)\n      interaction.edges = modification.edges\n      modification.applyToInteraction(arg)\n    },\n\n    'interactions:before-action-move': (arg) => {\n      const { interaction } = arg\n      const { modification } = interaction\n      const ret = modification.setAndApply(arg)\n      interaction.edges = modification.edges\n\n      return ret\n    },\n\n    'interactions:before-action-end': (arg) => {\n      const { interaction } = arg\n      const { modification } = interaction\n      const ret = modification.beforeEnd(arg)\n      interaction.edges = modification.startEdges\n\n      return ret\n    },\n\n    'interactions:action-start': addEventModifiers,\n    'interactions:action-move': addEventModifiers,\n    'interactions:action-end': addEventModifiers,\n\n    'interactions:after-action-start': (arg) => arg.interaction.modification.restoreInteractionCoords(arg),\n    'interactions:after-action-move': (arg) => arg.interaction.modification.restoreInteractionCoords(arg),\n\n    'interactions:stop': (arg) => arg.interaction.modification.stop(arg),\n  },\n}\n\nexport default modifiersBase\n"
	],
	"mappings": "uBAISA,MAAoB,wBAwBtB,SAASC,aAKdC,EAAiDC,GACjD,MAAMC,SAAEA,GAAaF,EACfG,EAAU,CACdC,MAAOJ,EAAOI,MACdC,IAAKL,EAAOK,IACZC,UAAWN,EAAOM,UAClBC,KAAMP,EAAOO,MAGTC,EAAYC,IAChB,MAAMC,EAAWD,GAAY,CAAC,EAE9BC,EAAQC,SAA8B,IAApBD,EAAQC,QAG1B,IAAK,MAAMC,KAAQV,EACXU,KAAQF,IACVA,EAAgBE,GAAQV,EAASU,IAIvC,MAAMC,EAA6C,CACjDH,UACAP,UACAF,OACAa,OAAQA,KACNJ,EAAQC,SAAU,EACXE,GAETE,QAASA,KACPL,EAAQC,SAAU,EACXE,IAIX,OAAOA,CAAC,EASV,OANIZ,GAAwB,iBAATA,IAEjBO,EAASQ,UAAYd,EACrBM,EAASS,SAAWd,GAGfK,CACT,QAEO,SAASU,mBAAkBC,OAChCA,EAAMC,YACNA,IAKA,MAAMC,EAASD,EAAYE,aAAcD,OAErCA,IACFF,EAAOI,UAAYF,EAAOG,WAE9B,CAEA,MAAMC,EAAwB,CAC5BC,GAAI,iBACJC,OAAQ,CAAC,WACTC,OAEA,CAFUC,GACRA,EAAM3B,SAAS4B,UAAUP,UAAY,EAAE,EAEzCQ,UAAW,CACT,kBAEA,EAFuBX,gBACrBA,EAAYE,aAAe,IAAIxB,EAAasB,EAAY,EAG1D,kCAOA,CAPqCY,GACnC,MAAMZ,YAAEA,GAAgBY,EAClBV,EAAeU,EAAIZ,YAAYE,aAErCA,EAAalB,MAAM4B,EAAKZ,EAAYa,OAAO7B,MAAM8B,MACjDd,EAAYe,MAAQb,EAAaa,MACjCb,EAAac,mBAAmBJ,EAAI,EAGtC,iCAOA,CAPoCA,GAClC,MAAMZ,YAAEA,GAAgBY,GAClBV,aAAEA,GAAiBF,EACnBiB,EAAMf,EAAagB,YAAYN,GAGrC,OAFAZ,EAAYe,MAAQb,EAAaa,MAE1BE,CAAG,EAGZ,gCAOA,CAPmCL,GACjC,MAAMZ,YAAEA,GAAgBY,GAClBV,aAAEA,GAAiBF,EACnBiB,EAAMf,EAAahB,UAAU0B,GAGnC,OAFAZ,EAAYe,MAAQb,EAAaiB,WAE1BF,CAAG,EAGZ,4BAA6BnB,kBAC7B,2BAA4BA,kBAC5B,0BAA2BA,kBAE3B,kCAAoCc,GAAQA,EAAIZ,YAAYE,aAAakB,yBAAyBR,GAClG,iCAAmCA,GAAQA,EAAIZ,YAAYE,aAAakB,yBAAyBR,GAEjG,oBAAsBA,GAAQA,EAAIZ,YAAYE,aAAaf,KAAKyB,oBAIrDP"
}