{
	"version": 3,
	"names": [
		"_interopRequireDefault",
		"require",
		"e",
		"r",
		"__esModule",
		"default",
		"t",
		"_getRequireWildcardCache",
		"has",
		"get",
		"n",
		"__proto__",
		"a",
		"Object",
		"defineProperty",
		"getOwnPropertyDescriptor",
		"u",
		"prototype",
		"hasOwnProperty",
		"call",
		"i",
		"set",
		"_interopRequireWildcard",
		"WeakMap",
		"obj",
		"CheckName",
		"touchAction",
		"boxSizing",
		"noListeners",
		"defaultExport",
		"id",
		"install",
		"exports"
	],
	"sources": [
		"plugin.ts"
	],
	"sourcesContent": [
		"import type Interaction from '@interactjs/core/Interaction'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Element, OptionMethod } from '@interactjs/core/types'\nimport domObjects from '@interactjs/utils/domObjects'\nimport { parentNode } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport * as win from '@interactjs/utils/window'\n\n/* eslint-disable import/no-duplicates -- for typescript module augmentations */\nimport './visualizer/plugin'\nimport visualizer from './visualizer/plugin'\n/* eslint-enable import/no-duplicates */\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    logger: Logger\n  }\n}\n\ndeclare module '@interactjs/core/InteractStatic' {\n  export interface InteractStatic {\n    visializer: typeof visualizer\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface BaseDefaults {\n    devTools?: DevToolsOptions\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    devTools: OptionMethod<DevToolsOptions>\n  }\n}\n\nexport interface DevToolsOptions {\n  ignore: { [P in keyof typeof CheckName]?: boolean }\n}\n\nexport interface Logger {\n  warn: (...args: any[]) => void\n  error: (...args: any[]) => void\n  log: (...args: any[]) => void\n}\n\nexport interface Check {\n  name: CheckName\n  text: string\n  perform: (interaction: Interaction) => boolean\n  getInfo: (interaction: Interaction) => any[]\n}\n\nenum CheckName {\n  touchAction = 'touchAction',\n  boxSizing = 'boxSizing',\n  noListeners = 'noListeners',\n}\n\nconst prefix = '[interact.js] '\nconst links = {\n  touchAction: 'https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action',\n  boxSizing: 'https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing',\n}\n\n// eslint-disable-next-line no-undef\nconst isProduction = process.env.NODE_ENV === 'production'\n\nfunction install(scope: Scope, { logger }: { logger?: Logger } = {}) {\n  const { Interactable, defaults } = scope\n\n  scope.logger = logger || console\n\n  defaults.base.devTools = {\n    ignore: {},\n  }\n\n  Interactable.prototype.devTools = function (options?: object) {\n    if (options) {\n      extend(this.options.devTools, options)\n      return this\n    }\n\n    return this.options.devTools\n  }\n\n  // can't set native events on non string targets without `addEventListener` prop\n  const { _onOff } = Interactable.prototype\n  Interactable.prototype._onOff = function (method, typeArg, listenerArg, options, filter) {\n    if (is.string(this.target) || this.target.addEventListener) {\n      return _onOff.call(this, method, typeArg, listenerArg, options, filter)\n    }\n\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const normalizedListeners = normalizeListeners(typeArg, listenerArg, filter)\n\n    for (const type in normalizedListeners) {\n      if (isNonNativeEvent(type, scope.actions)) continue\n      scope.logger.warn(\n        prefix +\n          `Can't add native \"${type}\" event listener to target without \\`addEventListener(type, listener, options)\\` prop.`,\n      )\n    }\n\n    return _onOff.call(this, method, normalizedListeners, options)\n  }\n  scope.usePlugin(visualizer)\n}\n\nconst checks: Check[] = [\n  {\n    name: CheckName.touchAction,\n    perform({ element }) {\n      return !!element && !parentHasStyle(element, 'touchAction', /pan-|pinch|none/)\n    },\n    getInfo({ element }) {\n      return [element, links.touchAction]\n    },\n    text: 'Consider adding CSS \"touch-action: none\" to this element\\n',\n  },\n\n  {\n    name: CheckName.boxSizing,\n    perform(interaction) {\n      const { element } = interaction\n\n      return (\n        interaction.prepared.name === 'resize' &&\n        element instanceof domObjects.HTMLElement &&\n        !hasStyle(element, 'boxSizing', /border-box/)\n      )\n    },\n    text: 'Consider adding CSS \"box-sizing: border-box\" to this resizable element',\n    getInfo({ element }) {\n      return [element, links.boxSizing]\n    },\n  },\n\n  {\n    name: CheckName.noListeners,\n    perform(interaction) {\n      const actionName = interaction.prepared.name\n      const moveListeners = interaction.interactable?.events.types[`${actionName}move`] || []\n\n      return !moveListeners.length\n    },\n    getInfo(interaction) {\n      return [interaction.prepared.name, interaction.interactable]\n    },\n    text: 'There are no listeners set for this action',\n  },\n]\n\nfunction hasStyle(element: HTMLElement, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  const value = element.style[prop] || win.window.getComputedStyle(element)[prop]\n  return styleRe.test((value || '').toString())\n}\n\nfunction parentHasStyle(element: Element, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  let parent = element as HTMLElement\n\n  while (is.element(parent)) {\n    if (hasStyle(parent, prop, styleRe)) {\n      return true\n    }\n\n    parent = parentNode(parent) as HTMLElement\n  }\n\n  return false\n}\n\nconst id = 'dev-tools'\nconst defaultExport: Plugin = isProduction\n  ? { id, install: () => {} }\n  : {\n      id,\n      install,\n      listeners: {\n        'interactions:action-start': ({ interaction }, scope) => {\n          for (const check of checks) {\n            const options = interaction.interactable && interaction.interactable.options\n\n            if (\n              !(options && options.devTools && options.devTools.ignore[check.name]) &&\n              check.perform(interaction)\n            ) {\n              scope.logger.warn(prefix + check.text, ...check.getInfo(interaction))\n            }\n          }\n        },\n      },\n      checks,\n      CheckName,\n      links,\n      prefix,\n    }\n\nexport default defaultExport\n"
	],
	"mappings": "8EAGAA,EAAAC,QAAA,gCACAA,QAAA,6BACAD,EAAAC,QAAA,4BACAD,EAAAC,QAAA,wBACAD,EAAAC,QAAA,sCACAD,EAAAC,QAAA,wCAI4B,EAAAC,EAAAC,KAAA,GAAAD,KAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,KAAAE,IAAAN,GAAA,OAAAI,EAAAG,IAAAP,GAAA,IAAAQ,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAd,EAAA,eAAAc,GAAAH,OAAAI,UAAAC,eAAAC,KAAAjB,EAAAc,GAAA,KAAAI,EAAAR,EAAAC,OAAAE,yBAAAb,EAAAc,GAAA,KAAAI,MAAAX,KAAAW,EAAAC,KAAAR,OAAAC,eAAAJ,EAAAM,EAAAI,GAAAV,EAAAM,GAAAd,EAAAc,EAAA,CAAAN,EAAAL,QAAAH,EAAAI,KAAAe,IAAAnB,EAAAQ,EAAA,EAH5BY,CAAArB,QAAA,4BAG4B,SAAAM,EAAAL,GAAA,sBAAAqB,QAAA,gBAAApB,EAAA,IAAAoB,QAAAjB,EAAA,IAAAiB,QAAA,OAAAhB,EAAAL,KAAAI,EAAAH,GAAAD,EAAA,UAAAF,EAAAwB,GAAA,OAAAA,KAAApB,WAAAoB,EAAA,CAAAnB,QAAAmB,EAAA,CAA5BxB,EAAAC,QAAA,wBAEA,IA2CKwB,EAAS,CAATA,MAAS,0BAATA,EAAS,sBAATA,EAAS,0BAATA,GAAS,CAATA,GAAS,IA8DJA,EAAUC,YAWVD,EAAUE,UAiBVF,EAAUG,YAiCpB,MACMC,EACF,CAAEC,GAFK,YAEDC,OAAgB,GAAPA,GAsBdC,QAAA3B,QAEUwB"
}