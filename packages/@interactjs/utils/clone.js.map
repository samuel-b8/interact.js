{
	"version": 3,
	"names": [
		"arr",
		"is",
		"clone",
		"source",
		"dest",
		"prop",
		"value",
		"plainObject",
		"array",
		"from"
	],
	"sources": [
		"clone.ts"
	],
	"sourcesContent": [
		"import * as arr from './arr'\nimport is from './is'\n\n// tslint:disable-next-line ban-types\nexport default function clone<T extends Object>(source: T): Partial<T> {\n  const dest = {} as Partial<T>\n\n  for (const prop in source) {\n    const value = source[prop]\n\n    if (is.plainObject(value)) {\n      dest[prop] = clone(value) as any\n    } else if (is.array(value)) {\n      dest[prop] = arr.from(value) as typeof value\n    } else {\n      dest[prop] = value\n    }\n  }\n\n  return dest\n}\n"
	],
	"mappings": "AAAA,OAAO,KAAKA,GAAG,MAAM,OAAO;AAC5B,OAAOC,EAAE,MAAM,MAAM;;AAErB;AACA,eAAe,SAASC,KAAKA,CAAmBC,MAAS,EAAc;EACrE,MAAMC,IAAI,GAAG,CAAC,CAAe;EAE7B,KAAK,MAAMC,IAAI,IAAIF,MAAM,EAAE;IACzB,MAAMG,KAAK,GAAGH,MAAM,CAACE,IAAI,CAAC;IAE1B,IAAIJ,EAAE,CAACM,WAAW,CAACD,KAAK,CAAC,EAAE;MACzBF,IAAI,CAACC,IAAI,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAQ;IAClC,CAAC,MAAM,IAAIL,EAAE,CAACO,KAAK,CAACF,KAAK,CAAC,EAAE;MAC1BF,IAAI,CAACC,IAAI,CAAC,GAAGL,GAAG,CAACS,IAAI,CAACH,KAAK,CAAiB;IAC9C,CAAC,MAAM;MACLF,IAAI,CAACC,IAAI,CAAC,GAAGC,KAAK;IACpB;EACF;EAEA,OAAOF,IAAI;AACb"
}