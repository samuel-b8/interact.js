{
	"version": 3,
	"names": [
		"contains",
		"array",
		"target",
		"indexOf",
		"remove",
		"splice",
		"merge",
		"source",
		"item",
		"push",
		"from",
		"findIndex",
		"func",
		"i",
		"length",
		"find"
	],
	"sources": [
		"arr.ts"
	],
	"sourcesContent": [
		"type Filter<T> = (element: T, index: number, array: T[]) => boolean\n\nexport const contains = <T>(array: T[], target: T) => array.indexOf(target) !== -1\n\nexport const remove = <T>(array: T[], target: T) => array.splice(array.indexOf(target), 1)\n\nexport const merge = <T, U>(target: Array<T | U>, source: U[]) => {\n  for (const item of source) {\n    target.push(item)\n  }\n\n  return target\n}\n\nexport const from = <T = any>(source: ArrayLike<T>) => merge([] as T[], source as T[])\n\nexport const findIndex = <T>(array: T[], func: Filter<T>) => {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i], i, array)) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport const find = <T = any>(array: T[], func: Filter<T>): T | undefined => array[findIndex(array, func)]\n"
	],
	"mappings": "AAEA,OAAO,MAAMA,QAAQ,GAAGA,CAAIC,KAAU,EAAEC,MAAS,KAAKD,KAAK,CAACE,OAAO,CAACD,MAAM,CAAC,KAAK,CAAC,CAAC;AAElF,OAAO,MAAME,MAAM,GAAGA,CAAIH,KAAU,EAAEC,MAAS,KAAKD,KAAK,CAACI,MAAM,CAACJ,KAAK,CAACE,OAAO,CAACD,MAAM,CAAC,EAAE,CAAC,CAAC;AAE1F,OAAO,MAAMI,KAAK,GAAGA,CAAOJ,MAAoB,EAAEK,MAAW,KAAK;EAChE,KAAK,MAAMC,IAAI,IAAID,MAAM,EAAE;IACzBL,MAAM,CAACO,IAAI,CAACD,IAAI,CAAC;EACnB;EAEA,OAAON,MAAM;AACf,CAAC;AAED,OAAO,MAAMQ,IAAI,GAAaH,MAAoB,IAAKD,KAAK,CAAC,EAAE,EAASC,MAAa,CAAC;AAEtF,OAAO,MAAMI,SAAS,GAAGA,CAAIV,KAAU,EAAEW,IAAe,KAAK;EAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAID,IAAI,CAACX,KAAK,CAACY,CAAC,CAAC,EAAEA,CAAC,EAAEZ,KAAK,CAAC,EAAE;MAC5B,OAAOY,CAAC;IACV;EACF;EAEA,OAAO,CAAC,CAAC;AACX,CAAC;AAED,OAAO,MAAME,IAAI,GAAGA,CAAUd,KAAU,EAAEW,IAAe,KAAoBX,KAAK,CAACU,SAAS,CAACV,KAAK,EAAEW,IAAI,CAAC,CAAC"
}