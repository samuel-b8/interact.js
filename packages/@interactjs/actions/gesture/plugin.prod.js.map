{
	"version": 3,
	"names": [
		"is",
		"pointerUtils",
		"updateGestureProps",
		"interaction",
		"iEvent",
		"phase",
		"prepared",
		"name",
		"pointers",
		"map",
		"p",
		"pointer",
		"starting",
		"ending",
		"deltaSource",
		"interactable",
		"options",
		"touches",
		"distance",
		"touchDistance",
		"box",
		"touchBBox",
		"scale",
		"ds",
		"angle",
		"touchAngle",
		"da",
		"gesture",
		"startDistance",
		"startAngle",
		"length",
		"prevEvent",
		"number",
		"Infinity",
		"isNaN",
		"id",
		"before",
		"install",
		"scope",
		"actions",
		"Interactable",
		"defaults",
		"prototype",
		"gesturable",
		"object",
		"this",
		"enabled",
		"setPerAction",
		"setOnEvents",
		"bool",
		"methodDict",
		"listeners",
		"arg",
		"gestureOptions",
		"action",
		"getCursor",
		"filterEventType",
		"type",
		"search"
	],
	"sources": [
		"plugin.ts"
	],
	"sourcesContent": [
		"import type { Interactable } from '@interactjs/core/Interactable'\nimport type { InteractEvent, EventPhase } from '@interactjs/core/InteractEvent'\nimport type { Interaction, DoPhaseArg } from '@interactjs/core/Interaction'\nimport type { PerActionDefaults } from '@interactjs/core/options'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Rect, PointerType, ListenersArg, OrBoolean } from '@interactjs/core/types'\nimport is from '@interactjs/utils/is'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    gesture?: {\n      angle: number // angle from first to second touch\n      distance: number\n      scale: number // gesture.distance / gesture.startDistance\n      startAngle: number // angle of line joining two touches\n      startDistance: number // distance between two touches of touchStart\n    }\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    gesturable(options: Partial<OrBoolean<GesturableOptions>> | boolean): this\n    gesturable(): GesturableOptions\n    /**\n     * ```js\n     * interact(element).gesturable({\n     *     onstart: function (event) {},\n     *     onmove : function (event) {},\n     *     onend  : function (event) {},\n     *\n     *     // limit multiple gestures.\n     *     // See the explanation in {@link Interactable.draggable} example\n     *     max: Infinity,\n     *     maxPerElement: 1,\n     * })\n     *\n     * var isGestureable = interact(element).gesturable()\n     * ```\n     *\n     * Gets or sets whether multitouch gestures can be performed on the target\n     *\n     * @param options - true/false or An object with event listeners to be fired on gesture events (makes the Interactable gesturable)\n     * @returns A boolean indicating if this can be the target of gesture events, or this Interactable\n     */\n    gesturable(options?: Partial<OrBoolean<GesturableOptions>> | boolean): this | GesturableOptions\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface ActionDefaults {\n    gesture: GesturableOptions\n  }\n}\n\ndeclare module '@interactjs/core/types' {\n  interface ActionMap {\n    gesture?: typeof gesture\n  }\n}\n\nexport interface GesturableOptions extends PerActionDefaults {\n  onstart?: ListenersArg\n  onmove?: ListenersArg\n  onend?: ListenersArg\n}\n\nexport interface GestureEvent extends InteractEvent<'gesture'> {\n  distance: number\n  angle: number\n  da: number // angle change\n  scale: number // ratio of distance start to current event\n  ds: number // scale change\n  box: Rect // enclosing box of all points\n  touches: PointerType[]\n}\n\nexport interface GestureSignalArg extends DoPhaseArg<'gesture', EventPhase> {\n  iEvent: GestureEvent\n  interaction: Interaction<'gesture'>\n}\n\nfunction install(scope: Scope) {\n  const { actions, Interactable, defaults } = scope\n\n  Interactable.prototype.gesturable = function (\n    this: InstanceType<typeof Interactable>,\n    options: GesturableOptions | boolean,\n  ) {\n    if (is.object(options)) {\n      this.options.gesture.enabled = options.enabled !== false\n      this.setPerAction('gesture', options)\n      this.setOnEvents('gesture', options)\n\n      return this\n    }\n\n    if (is.bool(options)) {\n      this.options.gesture.enabled = options\n\n      return this\n    }\n\n    return this.options.gesture as GesturableOptions\n  } as Interactable['gesturable']\n\n  actions.map.gesture = gesture\n  actions.methodDict.gesture = 'gesturable'\n\n  defaults.actions.gesture = gesture.defaults\n}\n\nfunction updateGestureProps({ interaction, iEvent, phase }: GestureSignalArg) {\n  if (interaction.prepared.name !== 'gesture') return\n\n  const pointers = interaction.pointers.map((p) => p.pointer)\n  const starting = phase === 'start'\n  const ending = phase === 'end'\n  const deltaSource = interaction.interactable.options.deltaSource\n\n  iEvent.touches = [pointers[0], pointers[1]]\n\n  if (starting) {\n    iEvent.distance = pointerUtils.touchDistance(pointers, deltaSource)\n    iEvent.box = pointerUtils.touchBBox(pointers)\n    iEvent.scale = 1\n    iEvent.ds = 0\n    iEvent.angle = pointerUtils.touchAngle(pointers, deltaSource)\n    iEvent.da = 0\n\n    interaction.gesture.startDistance = iEvent.distance\n    interaction.gesture.startAngle = iEvent.angle\n  } else if (ending || interaction.pointers.length < 2) {\n    const prevEvent = interaction.prevEvent as GestureEvent\n\n    iEvent.distance = prevEvent.distance\n    iEvent.box = prevEvent.box\n    iEvent.scale = prevEvent.scale\n    iEvent.ds = 0\n    iEvent.angle = prevEvent.angle\n    iEvent.da = 0\n  } else {\n    iEvent.distance = pointerUtils.touchDistance(pointers, deltaSource)\n    iEvent.box = pointerUtils.touchBBox(pointers)\n    iEvent.scale = iEvent.distance / interaction.gesture.startDistance\n    iEvent.angle = pointerUtils.touchAngle(pointers, deltaSource)\n\n    iEvent.ds = iEvent.scale - interaction.gesture.scale\n    iEvent.da = iEvent.angle - interaction.gesture.angle\n  }\n\n  interaction.gesture.distance = iEvent.distance\n  interaction.gesture.angle = iEvent.angle\n\n  if (is.number(iEvent.scale) && iEvent.scale !== Infinity && !isNaN(iEvent.scale)) {\n    interaction.gesture.scale = iEvent.scale\n  }\n}\n\nconst gesture: Plugin = {\n  id: 'actions/gesture',\n  before: ['actions/drag', 'actions/resize'],\n  install,\n  listeners: {\n    'interactions:action-start': updateGestureProps,\n    'interactions:action-move': updateGestureProps,\n    'interactions:action-end': updateGestureProps,\n\n    'interactions:new': ({ interaction }) => {\n      interaction.gesture = {\n        angle: 0,\n        distance: 0,\n        scale: 1,\n        startAngle: 0,\n        startDistance: 0,\n      }\n    },\n\n    'auto-start:check': (arg) => {\n      if (arg.interaction.pointers.length < 2) {\n        return undefined\n      }\n\n      const gestureOptions = arg.interactable.options.gesture\n\n      if (!(gestureOptions && gestureOptions.enabled)) {\n        return undefined\n      }\n\n      arg.action = { name: 'gesture' }\n\n      return false\n    },\n  },\n\n  defaults: {},\n\n  getCursor() {\n    return ''\n  },\n\n  filterEventType: (type: string) => type.search('gesture') === 0,\n}\n\nexport default gesture\n"
	],
	"mappings": "OAMOA,MAAQ,mCACHC,MAAkB,mCA0G9B,SAASC,GAAmBC,YAAEA,EAAWC,OAAEA,EAAMC,MAAEA,IACjD,GAAkC,YAA9BF,EAAYG,SAASC,KAAoB,OAE7C,MAAMC,EAAWL,EAAYK,SAASC,KAAKC,GAAMA,EAAEC,UAC7CC,EAAqB,UAAVP,EACXQ,EAAmB,QAAVR,EACTS,EAAcX,EAAYY,aAAaC,QAAQF,YAIrD,GAFAV,EAAOa,QAAU,CAACT,EAAS,GAAIA,EAAS,IAEpCI,EACFR,EAAOc,SAAWjB,EAAakB,cAAcX,EAAUM,GACvDV,EAAOgB,IAAMnB,EAAaoB,UAAUb,GACpCJ,EAAOkB,MAAQ,EACflB,EAAOmB,GAAK,EACZnB,EAAOoB,MAAQvB,EAAawB,WAAWjB,EAAUM,GACjDV,EAAOsB,GAAK,EAEZvB,EAAYwB,QAAQC,cAAgBxB,EAAOc,SAC3Cf,EAAYwB,QAAQE,WAAazB,EAAOoB,WACnC,GAAIX,GAAUV,EAAYK,SAASsB,OAAS,EAAG,CACpD,MAAMC,EAAY5B,EAAY4B,UAE9B3B,EAAOc,SAAWa,EAAUb,SAC5Bd,EAAOgB,IAAMW,EAAUX,IACvBhB,EAAOkB,MAAQS,EAAUT,MACzBlB,EAAOmB,GAAK,EACZnB,EAAOoB,MAAQO,EAAUP,MACzBpB,EAAOsB,GAAK,CACd,MACEtB,EAAOc,SAAWjB,EAAakB,cAAcX,EAAUM,GACvDV,EAAOgB,IAAMnB,EAAaoB,UAAUb,GACpCJ,EAAOkB,MAAQlB,EAAOc,SAAWf,EAAYwB,QAAQC,cACrDxB,EAAOoB,MAAQvB,EAAawB,WAAWjB,EAAUM,GAEjDV,EAAOmB,GAAKnB,EAAOkB,MAAQnB,EAAYwB,QAAQL,MAC/ClB,EAAOsB,GAAKtB,EAAOoB,MAAQrB,EAAYwB,QAAQH,MAGjDrB,EAAYwB,QAAQT,SAAWd,EAAOc,SACtCf,EAAYwB,QAAQH,MAAQpB,EAAOoB,MAE/BxB,EAAGgC,OAAO5B,EAAOkB,QAAUlB,EAAOkB,QAAUW,MAAaC,MAAM9B,EAAOkB,SACxEnB,EAAYwB,QAAQL,MAAQlB,EAAOkB,MAEvC,CAEA,MAAMK,EAAkB,CACtBQ,GAAI,kBACJC,OAAQ,CAAC,eAAgB,kBACzBC,QAhFeC,GACf,MAAMC,QAAEA,EAAOC,aAAEA,EAAYC,SAAEA,GAAaH,EAE5CE,EAAaE,UAAUC,WAAa,SAElC3B,GAEA,OAAIhB,EAAG4C,OAAO5B,IACZ6B,KAAK7B,QAAQW,QAAQmB,SAA8B,IAApB9B,EAAQ8B,QACvCD,KAAKE,aAAa,UAAW/B,GAC7B6B,KAAKG,YAAY,UAAWhC,GAErB6B,MAGL7C,EAAGiD,KAAKjC,IACV6B,KAAK7B,QAAQW,QAAQmB,QAAU9B,EAExB6B,MAGFA,KAAK7B,QAAQW,OACtB,EAEAY,EAAQ9B,IAAIkB,QAAUA,EACtBY,EAAQW,WAAWvB,QAAU,aAE7Bc,EAASF,QAAQZ,QAAUA,EAAQc,QACrC,EAqDEU,UAAW,CACT,4BAA6BjD,EAC7B,2BAA4BA,EAC5B,0BAA2BA,EAE3B,kBAQA,EARuBC,gBACrBA,EAAYwB,QAAU,CACpBH,MAAO,EACPN,SAAU,EACVI,MAAO,EACPO,WAAY,EACZD,cAAe,EAChB,EAGH,kBAcA,CAdqBwB,GACnB,GAAIA,EAAIjD,YAAYK,SAASsB,OAAS,EACpC,OAGF,MAAMuB,EAAiBD,EAAIrC,aAAaC,QAAQW,QAEhD,OAAM0B,GAAkBA,EAAeP,SAIvCM,EAAIE,OAAS,CAAE/C,KAAM,YAEd,QANP,CAMY,GAIhBkC,SAAU,CAAC,EAEXc,SAEA,GADE,MAAO,EACT,EAEAC,gBAAkBC,GAA4C,IAA3BA,EAAKC,OAAO,2BAGlC/B"
}