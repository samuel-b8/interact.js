import{BaseEvent as t}from"../../core/BaseEvent.prod.js";import*as e from"../../utils/arr.prod.js";export class DropEvent extends t{dropzone;dragEvent;relatedTarget;draggable;propagationStopped=!1;immediatePropagationStopped=!1;constructor(t,e,r){super(e._interaction);const{element:o,dropzone:a}="dragleave"===r?t.prev:t.cur;this.type=r,this.target=o,this.currentTarget=o,this.dropzone=a,this.dragEvent=e,this.relatedTarget=e.target,this.draggable=e.interactable,this.timeStamp=e.timeStamp}reject(){const{dropState:t}=this._interaction;if("dropactivate"===this.type||this.dropzone&&t.cur.dropzone===this.dropzone&&t.cur.element===this.target)if(t.prev.dropzone=this.dropzone,t.prev.element=this.target,t.rejected=!0,t.events.enter=null,this.stopImmediatePropagation(),"dropactivate"===this.type){const r=t.activeDrops,o=e.findIndex(r,(({dropzone:t,element:e})=>t===this.dropzone&&e===this.target));t.activeDrops.splice(o,1);const a=new DropEvent(t,this.dragEvent,"dropdeactivate");a.dropzone=this.dropzone,a.target=this.target,this.dropzone.fire(a)}else this.dropzone.fire(new DropEvent(t,this.dragEvent,"dragleave"))}preventDefault(){}stopPropagation(){this.propagationStopped=!0}stopImmediatePropagation(){this.immediatePropagationStopped=this.propagationStopped=!0}}
//# sourceMappingURL=DropEvent.prod.js.map