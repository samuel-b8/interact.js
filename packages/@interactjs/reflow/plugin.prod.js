import*as e from"../utils/arr.prod.js";import{copyAction as t}from"../utils/misc.prod.js";import*as o from"../utils/pointerUtils.prod.js";import{tlbrToXywh as r}from"../utils/rect.prod.js";function n(e,r,n,i,s){const l=e.interactions.new({pointerType:"reflow"}),a={interaction:l,event:s,pointer:s,eventTarget:n,phase:"reflow"};l.interactable=r,l.element=n,l.prevEvent=s,l.updatePointer(s,s,n,!0),o.setZeroCoords(l.coords.delta),t(l.prepared,i),l._doPhase(a);const{Promise:p}=e.window,c=p?new p((e=>{l._reflowResolve=e})):void 0;return l._reflowPromise=c,l.start(i,r,n),l._interacting?(l.move(a),l.end(s)):(l.stop(),l._reflowResolve()),l.removePointer(s,s),c}const i={id:"reflow",install(t){const{Interactable:i}=t;t.actions.phases.reflow=!0,i.prototype.reflow=function(i){return((t,i,s)=>{const l=t.getAllElements(),a=s.window.Promise,p=a?[]:null;for(const c of l){const l=t.getRect(c);if(!l)break;const f=e.find(s.interactions.list,(e=>e.interacting()&&e.interactable===t&&e.element===c&&e.prepared.name===i.name));let m;if(f)f.move(),p&&(m=f._reflowPromise||new a((e=>{f._reflowResolve=e})));else{const e=r(l),a={page:{x:e.x,y:e.y},client:{x:e.x,y:e.y},timeStamp:s.now()},p=o.coordsToEvent(a);m=n(s,t,c,i,p)}p&&p.push(m)}return p&&a.all(p).then((()=>t))})(this,i,t)}},listeners:{"interactions:stop"({interaction:t},o){"reflow"===t.pointerType&&(t._reflowResolve&&t._reflowResolve(),e.remove(o.interactions.list,t))}}};export default i;
//# sourceMappingURL=plugin.prod.js.map