{
	"version": 3,
	"names": [
		"arr",
		"copyAction",
		"pointerUtils",
		"tlbrToXywh",
		"startReflow",
		"scope",
		"interactable",
		"element",
		"action",
		"event",
		"interaction",
		"interactions",
		"new",
		"pointerType",
		"signalArg",
		"pointer",
		"eventTarget",
		"phase",
		"prevEvent",
		"updatePointer",
		"setZeroCoords",
		"coords",
		"delta",
		"prepared",
		"_doPhase",
		"Promise",
		"window",
		"reflowPromise",
		"resolve",
		"_reflowResolve",
		"undefined",
		"_reflowPromise",
		"start",
		"_interacting",
		"move",
		"end",
		"stop",
		"removePointer",
		"reflow",
		"id",
		"install",
		"Interactable",
		"actions",
		"phases",
		"prototype",
		"elements",
		"getAllElements",
		"promises",
		"rect",
		"getRect",
		"runningInteraction",
		"find",
		"list",
		"interacting",
		"name",
		"xywh",
		"page",
		"x",
		"y",
		"client",
		"timeStamp",
		"now",
		"coordsToEvent",
		"push",
		"all",
		"then",
		"doReflow",
		"this",
		"listeners",
		"remove"
	],
	"sources": [
		"plugin.ts"
	],
	"sourcesContent": [
		"import type { Interactable } from '@interactjs/core/Interactable'\nimport type { DoAnyPhaseArg, Interaction } from '@interactjs/core/Interaction'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { ActionName, ActionProps, Element } from '@interactjs/core/types'\nimport * as arr from '@interactjs/utils/arr'\nimport { copyAction } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport { tlbrToXywh } from '@interactjs/utils/rect'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:before-action-reflow': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-reflow': DoAnyPhaseArg\n    'interactions:after-action-reflow': DoAnyPhaseArg\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    /**\n     * ```js\n     * const interactable = interact(target)\n     * const drag = { name: drag, axis: 'x' }\n     * const resize = { name: resize, edges: { left: true, bottom: true }\n     *\n     * interactable.reflow(drag)\n     * interactable.reflow(resize)\n     * ```\n     *\n     * Start an action sequence to re-apply modifiers, check drops, etc.\n     *\n     * @param { Object } action The action to begin\n     * @param { string } action.name The name of the action\n     * @returns { Promise } A promise that resolves to the `Interactable` when actions on all targets have ended\n     */\n    reflow<T extends ActionName>(action: ActionProps<T>): ReturnType<typeof doReflow>\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    _reflowPromise: Promise<void>\n    _reflowResolve: (...args: unknown[]) => void\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface PhaseMap {\n    reflow?: true\n  }\n}\n\nfunction install(scope: Scope) {\n  const { Interactable } = scope\n\n  scope.actions.phases.reflow = true\n\n  Interactable.prototype.reflow = function (action: ActionProps) {\n    return doReflow(this, action, scope)\n  }\n}\n\nfunction doReflow<T extends ActionName>(\n  interactable: Interactable,\n  action: ActionProps<T>,\n  scope: Scope,\n): Promise<Interactable> {\n  const elements = interactable.getAllElements()\n\n  // tslint:disable-next-line variable-name\n  const Promise = (scope.window as any).Promise\n  const promises: Array<Promise<null>> | null = Promise ? [] : null\n\n  for (const element of elements) {\n    const rect = interactable.getRect(element as HTMLElement | SVGElement)\n\n    if (!rect) {\n      break\n    }\n\n    const runningInteraction = arr.find(scope.interactions.list, (interaction: Interaction) => {\n      return (\n        interaction.interacting() &&\n        interaction.interactable === interactable &&\n        interaction.element === element &&\n        interaction.prepared.name === action.name\n      )\n    })\n    let reflowPromise: Promise<null>\n\n    if (runningInteraction) {\n      runningInteraction.move()\n\n      if (promises) {\n        reflowPromise =\n          runningInteraction._reflowPromise ||\n          new Promise((resolve: any) => {\n            runningInteraction._reflowResolve = resolve\n          })\n      }\n    } else {\n      const xywh = tlbrToXywh(rect)\n      const coords = {\n        page: { x: xywh.x, y: xywh.y },\n        client: { x: xywh.x, y: xywh.y },\n        timeStamp: scope.now(),\n      }\n\n      const event = pointerUtils.coordsToEvent(coords)\n      reflowPromise = startReflow<T>(scope, interactable, element, action, event)\n    }\n\n    if (promises) {\n      promises.push(reflowPromise)\n    }\n  }\n\n  return promises && Promise.all(promises).then(() => interactable)\n}\n\nfunction startReflow<T extends ActionName>(\n  scope: Scope,\n  interactable: Interactable,\n  element: Element,\n  action: ActionProps<T>,\n  event: any,\n) {\n  const interaction = scope.interactions.new({ pointerType: 'reflow' })\n  const signalArg = {\n    interaction,\n    event,\n    pointer: event,\n    eventTarget: element,\n    phase: 'reflow',\n  } as const\n\n  interaction.interactable = interactable\n  interaction.element = element\n  interaction.prevEvent = event\n  interaction.updatePointer(event, event, element, true)\n  pointerUtils.setZeroCoords(interaction.coords.delta)\n\n  copyAction(interaction.prepared, action)\n  interaction._doPhase(signalArg)\n\n  const { Promise } = scope.window as unknown as { Promise: PromiseConstructor }\n  const reflowPromise = Promise\n    ? new Promise<undefined>((resolve) => {\n        interaction._reflowResolve = resolve\n      })\n    : undefined\n\n  interaction._reflowPromise = reflowPromise\n  interaction.start(action, interactable, element)\n\n  if (interaction._interacting) {\n    interaction.move(signalArg)\n    interaction.end(event)\n  } else {\n    interaction.stop()\n    interaction._reflowResolve()\n  }\n\n  interaction.removePointer(event, event)\n\n  return reflowPromise\n}\n\nconst reflow: Plugin = {\n  id: 'reflow',\n  install,\n  listeners: {\n    // remove completed reflow interactions\n    'interactions:stop': ({ interaction }, scope) => {\n      if (interaction.pointerType === 'reflow') {\n        if (interaction._reflowResolve) {\n          interaction._reflowResolve()\n        }\n\n        arr.remove(scope.interactions.list, interaction)\n      }\n    },\n  },\n}\n\nexport default reflow\n"
	],
	"mappings": "UAIYA,MAAS,4CACZC,MAAkB,kCACfC,MAAkB,qDACrBC,MAAkB,wBAiH3B,SAASC,EACPC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAcL,EAAMM,aAAaC,IAAI,CAAEC,YAAa,WACpDC,EAAY,CAChBJ,cACAD,QACAM,QAASN,EACTO,YAAaT,EACbU,MAAO,UAGTP,EAAYJ,aAAeA,EAC3BI,EAAYH,QAAUA,EACtBG,EAAYQ,UAAYT,EACxBC,EAAYS,cAAcV,EAAOA,EAAOF,GAAS,GACjDL,EAAakB,cAAcV,EAAYW,OAAOC,OAE9CrB,EAAWS,EAAYa,SAAUf,GACjCE,EAAYc,SAASV,GAErB,MAAMW,QAAEA,GAAYpB,EAAMqB,OACpBC,EAAgBF,EAClB,IAAIA,GAAoBG,IACtBlB,EAAYmB,eAAiBD,CAAO,SAEtCE,EAeJ,OAbApB,EAAYqB,eAAiBJ,EAC7BjB,EAAYsB,MAAMxB,EAAQF,EAAcC,GAEpCG,EAAYuB,cACdvB,EAAYwB,KAAKpB,GACjBJ,EAAYyB,IAAI1B,KAEhBC,EAAY0B,OACZ1B,EAAYmB,kBAGdnB,EAAY2B,cAAc5B,EAAOA,GAE1BkB,CACT,CAEA,MAAMW,EAAiB,CACrBC,GAAI,SACJC,QAtHenC,GACf,MAAMoC,aAAEA,GAAiBpC,EAEzBA,EAAMqC,QAAQC,OAAOL,QAAS,EAE9BG,EAAaG,UAAUN,OAAS,SAAU9B,GACxC,MAIJ,EACEF,EACAE,EACAH,KAEA,MAAMwC,EAAWvC,EAAawC,iBAGxBrB,EAAWpB,EAAMqB,OAAeD,QAChCsB,EAAwCtB,EAAU,GAAK,KAE7D,IAAK,MAAMlB,KAAWsC,EAAU,CAC9B,MAAMG,EAAO1C,EAAa2C,QAAQ1C,GAElC,IAAKyC,EACH,MAGF,MAAME,EAAqBlD,EAAImD,KAAK9C,EAAMM,aAAayC,MAAO1C,GAE1DA,EAAY2C,eACZ3C,EAAYJ,eAAiBA,GAC7BI,EAAYH,UAAYA,GACxBG,EAAYa,SAAS+B,OAAS9C,EAAO8C,OAGzC,IAAI3B,EAEJ,GAAIuB,EACFA,EAAmBhB,OAEfa,IACFpB,EACEuB,EAAmBnB,gBACnB,IAAIN,GAASG,IACXsB,EAAmBrB,eAAiBD,CAAO,SAG5C,CACL,MAAM2B,EAAOpD,EAAW6C,GAClB3B,EAAS,CACbmC,KAAM,CAAEC,EAAGF,EAAKE,EAAGC,EAAGH,EAAKG,GAC3BC,OAAQ,CAAEF,EAAGF,EAAKE,EAAGC,EAAGH,EAAKG,GAC7BE,UAAWvD,EAAMwD,OAGbpD,EAAQP,EAAa4D,cAAczC,GACzCM,EAAgBvB,EAAeC,EAAOC,EAAcC,EAASC,EAAQC,EACvE,CAEIsC,GACFA,EAASgB,KAAKpC,EAElB,CAEA,OAAOoB,GAAYtB,EAAQuC,IAAIjB,GAAUkB,MAAK,IAAM3D,GACtD,EA5DW4D,CAASC,KAAM3D,EAAQH,EAChC,CACF,EA+GE+D,UAAW,CAET,mBAQA,EARwB1D,eAAeL,GACL,WAA5BK,EAAYG,cACVH,EAAYmB,gBACdnB,EAAYmB,iBAGd7B,EAAIqE,OAAOhE,EAAMM,aAAayC,KAAM1C,GACtC,mBAKS4B"
}